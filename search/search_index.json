{"config":{"lang":["en"],"separator":"[\\s\\-,:!=\\[\\]()\"/]+|(?!\\b)(?=[A-Z][a-z])|\\.(?!\\d)|&[lg]t;","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"pyAVL Documentation","text":"<p>Welcome to the official documentation for <code>pyAVL</code>, a stripped-down version of Mark Drela and Harold Youngren's famous AVL code wrapped in python with <code>f2py</code>. This wrapper allows for seamless integration of AVL into larger models and parameter sweeps, providing users with access to more data than available through the traditional file output. Dive in to learn about installation, analysis, and optimization with <code>pyAVL</code>.</p> <p>Before working with pyAVL it is useful to familiarize yourself with AVL. More information about AVL can be would at its website. </p>"},{"location":"analysis/","title":"Analysis with pyAVL","text":"<p>After initializing and setting up your <code>AVLSolver</code>, you can perform analysis tasks such as alpha sweeps and CL sweeps.</p>"},{"location":"analysis/#alpha-sweep","title":"Alpha Sweep","text":"<p>Here's an example of an alpha sweep:</p> <pre><code>print(\"----------------- alpha sweep ----------------\")\nprint(\"   Angle        Cl           Cd          Cdi          Cdv          Cm\")\nfor alpha in range(10):\n    avl_solver.add_constraint(\"alpha\", alpha)\n    avl_solver.execute_run()\n    run_data = avl_solver.get_case_total_data()\n    print(\n        f' {alpha:10.6f}   {run_data[\"CL\"]:10.6f}   {run_data[\"CD\"]:10.6f}   {run_data[\"CDi\"]:10.6f}   {run_data[\"CDv\"]:10.6f}   {run_data[\"CM\"]:10.6f}'\n    )\n</code></pre>"},{"location":"analysis/#cl-sweep","title":"CL Sweep","text":"<p>Here's how you can perform a CL sweep:</p> <pre><code>print(\"----------------- CL sweep ----------------\")\nprint(\"   Angle        Cl           Cd          Cdff          Cdv          Cm\")\nfor cl in np.arange(0.6,1.6,0.1):\n    avl_solver.add_trim_condition(\"CL\", cl)\n    avl_solver.execute_run()\n    run_data = avl_solver.get_case_total_data()\n    alpha = avl_solver.get_case_parameter(\"alpha\")\n    print(\n        f' {alpha:10.6f}   {run_data[\"CL\"]:10.6f}   {run_data[\"CD\"]:10.6f}   {run_data[\"CDi\"]:10.6f}   {run_data[\"CDv\"]:10.6f}   {run_data[\"CM\"]:10.6f}'\n    )\n</code></pre>"},{"location":"dev_docs/","title":"Development Docs","text":"<p>to add a variable to avl shared memory (common block) 1. add it to the COMMON line AND declare its type above 2. navigate to <code>src/includes</code> and run <code>gen_ad_inc.py</code> </p>"},{"location":"dev_docs/#releasing-a-new-version","title":"releasing a new version","text":"<ol> <li>Bump the version number in pyproject.toml AND in meson.build.</li> <li>I cannot figure out a way to single source this so it will have to be done in two steps for now.</li> <li>then create a new release on github. Create a new taged version as part of the release ```</li> </ol>"},{"location":"installation/","title":"Installation Guide for pyAVL","text":""},{"location":"installation/#installing-with-pip","title":"Installing with pip","text":"<p>The recommended method to install <code>pyAVL</code> is via pip:</p> <p><pre><code>pip install pyavl-wrapper\n</code></pre> This package is optimized with OpenBLAS for quicker analysis.</p>"},{"location":"installation/#supported-platforms","title":"Supported Platforms","text":"<p>Currently, <code>pyAVL</code> supports: - Linux - macOS</p> <p>Note</p> <p>Windows support is under development. For now, Windows users can utilize <code>pyAVL</code> through the Windows Subsystem for Linux (WSL).</p>"},{"location":"installation/#building-locally","title":"Building Locally","text":"<p>If you'd like to build <code>pyAVL</code> manually, follow the steps below:</p> <ol> <li>Clone the repository to your local machine.</li> <li>Install OpenBlas and make sure its libraries can be seen by the compiler. The following script should be able to install OpenBlas for you.    <code>shell    sh -c 'bash /path/to/pyavl/tools/wheels/cibw_before_build_linux.sh /path/to/pyavl    '</code></li> <li>Navigate to the root directory and run:    <pre><code>pip install .\n</code></pre></li> </ol>"},{"location":"optimization/","title":"Optimization","text":"<p>See <code>examples/aircraft/run_opt.py</code> for a basic example.  Other scripts in the examples' directory provide examples for more complex cases. </p> <p>More documentation to follow.  For now if you have a question post an issue on github.  </p>"},{"location":"optimization/#debugging","title":"Debugging","text":"<ul> <li>Some variables (like chord, dihedral, x and z leading edge position) can lead to local minimum.     To help fix this add a constraint that keeps the variable monotonic or use a custom parameterization.</li> <li>Discontinuities can appear when moving flaps or ailerons due to sparse paneling. Use section paneling for this case to preserve good paneling at the edges of the control surfaces.  </li> </ul>"},{"location":"parameter_sweeps/","title":"Modifying Geometry for Parameter Sweeps in pyAVL","text":"<p>pyAVL not only offers aerodynamic analysis capabilities but also provides tools to access and modify geometric parameters of your aircraft models. This documentation illustrates how users can retrieve and set geometry parameters for parameter sweeps.</p>"},{"location":"parameter_sweeps/#setting-geometry-parameters","title":"Setting geometry parameters","text":"<p>To apply geometry changes to the AVLSolver object, use the <code>set_surface_params</code> method. <pre><code>avl_solver.set_surface_params(data)\n</code></pre> This method sets the surface parameters of the AVL model based on the provided dictionary, data. The data pasted to this method must be a dictionary of surface names whos values are a dictionary of surface and section keywords. An example of such a dictionary is <pre><code>data = {\n    'Wing': {\n        'angle': 3.5,  # a surface keyword example\n        \"chords\": np.array([0.5, 0.4, 0.3, 0.2, 0.1]) #section keyword example\n    }\n}\n</code></pre></p>"},{"location":"parameter_sweeps/#getting-geometry-parameters","title":"Getting geometry parameters","text":"<p>To retrieve surface parameters from your AVL model, use the <code>get_surface_params</code> method. By default, this method only returns data about the geometry of the surface, but information about the paneling and control surfaces can also be included by passing the corresponding flags like so.  <pre><code>surf_data = avl_solver.get_surface_params(\n    include_geom=True,\n    include_panneling=True,\n    include_con_surf=True\n)\n</code></pre> The data from <code>get_surface_params</code> come directly from the geometry file used by AVL. See the AVL user guide for more information about all the possible variables. For most use cases, it is probable that you will only need to interact with the geometric variables below. </p> Variable Description scale Scale factor. translate Translation vector. angle Surface angle. aincs Array of angle increments. chords Array of chord lengths. xyzles Array of leading edge coordinates."},{"location":"usage/","title":"Basic Usage Overview","text":"<p><code>pyAVL</code> offers a simple and intuitive API, mirroring AVL's text interface. The typical workflow involves loading a geometry file, adding constraints, and executing analysis runs.</p>"},{"location":"usage/#initializing-and-setting-up-avl-solver","title":"Initializing and Setting up AVL Solver","text":"<p>To begin with <code>pyAVL</code>, start by initializing the <code>AVLSolver</code> class:</p> <p><pre><code>from pyavl import AVLSolver\n</code></pre> avl_solver = AVLSolver(geo_file=\"aircraft.avl\")</p> <p>After initializing, you can set up various constraints and parameters:</p> <pre><code>avl_solver.add_constraint(\"alpha\", 0.00)\navl_solver.add_constraint(\"Elevator\", 0.00, con_var=\"Cm pitch moment\")\navl_solver.add_constraint(\"Rudder\", 0.00, con_var=\"Cn yaw moment\")\navl_solver.set_case_parameter(\"Mach\", 0.3)\n</code></pre>"},{"location":"usage/#running-analysis","title":"Running Analysis","text":"<p>Once you've set up the solver, running the analysis is straightforward:</p> <pre><code>avl_solver.execute_run()\n</code></pre> <p>For a more detailed example and advanced use cases, see the analysis guide.</p>"}]}