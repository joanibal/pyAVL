build_and_store_wheels: &BUILD_AND_STORE_WHEELS
  install_cibuildwheel_script:
    - python -m pip install cibuildwheel==2.15.0
  cibuildwheel_script:
    - cibuildwheel
  wheels_artifacts:
    path: "wheelhouse/*"


######################################################################
# Build macosx_arm64 natively
######################################################################

cirrus_wheels_macos_arm64_task:
  macos_instance:
    image: ghcr.io/cirruslabs/macos-monterey-xcode:14
  matrix:
    - env:
       # building all four wheels in a single task takes ~45 mins
       CIBW_BUILD: cp39-* cp310-* cp311-*
    # - env:
    #    # building all four wheels in a single task takes ~45 mins
    #   #  CIBW_BUILD: cp38-* cp39-* cp310-* cp311-*
    #    CIBW_BUILD: cp310-* 
  env:
    PYPI_TOKEN_TEST: ENCRYPTED[3a78537243c7e38cd58853cc4caf77a2e6b2f3a06511952347677300620f6d61f650fd45142d02788b00492b5e6de49f]
    PYPI_TOKEN: ENCRYPTED[b27e8f130f21bdd930757077153317e14140a0bac98261a4279e3107ce5c4d859b1f64e304aa52ecbc267727660d354b]
    CIBW_ARCHS: arm64
    CIBW_ARCHS_MACOS: arm64
    PATH: /opt/homebrew/opt/python@3.10/bin:$PATH
    CIBW_PRERELEASE_PYTHONS: True
    CIBW_ENVIRONMENT: >
      MACOSX_DEPLOYMENT_TARGET=12.0
      _PYTHON_HOST_PLATFORM="macosx-12.0-arm64"             
    CIBW_BEFORE_BUILD_MACOS: "bash {project}/tools/wheels/cibw_before_build_macos.sh {project}"
    PKG_CONFIG_PATH: /opt/arm64-builds/lib/pkgconfig
    # assumes that the cmake config is in /usr/local/lib/cmake
    CMAKE_PREFIX_PATH: /opt/arm64-builds/
    REPAIR_PATH: /usr/local/gfortran/lib:/opt/arm64-builds/lib
    CIBW_REPAIR_WHEEL_COMMAND_MACOS: >
      DYLD_LIBRARY_PATH=/usr/local/gfortran/lib:/opt/arm64-builds/lib delocate-listdeps {wheel} &&
      DYLD_LIBRARY_PATH=/usr/local/gfortran/lib:/opt/arm64-builds/lib delocate-wheel --require-archs {delocate_archs} -w {dest_dir} {wheel}

  install_pre_requirements_script:
    - brew install python@3.10
    - ln -s python3 /opt/homebrew/opt/python@3.10/bin/python

  build_script:
    - which python
    # needed for submodules
    - git submodule update --init
    - uname -m
    - python -c "import platform;print(platform.python_version());print(platform.system());print(platform.machine())"
    - clang --version
  <<: *BUILD_AND_STORE_WHEELS

  upload_pypi_script: |
    #!/usr/bin/env bash
    echo ${CIRRUS_RELEASE}
    echo $CIRRUS_TAG
    echo ${CIRRUS_TAG}
    # deploy source distribution to PyPI using 'twine'
    python -m pip install twine
    if [[ "${CIRRUS_RELEASE}" == "" ]]; then
      python -m twine upload --verbose --repository-url https://test.pypi.org/legacy/ --username __token__ --password ${PYPI_TOKEN_TEST} wheelhouse/*
    else 
      echo "would have uploaded"
      # python -m twine upload --verbose --username __token__ --password ${PYPI_TOKEN_TEST} wheelhouse/*
    fi
    
